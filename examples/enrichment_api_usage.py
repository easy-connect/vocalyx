#!/usr/bin/env python3
"""
Exemple d'utilisation de l'API d'enrichissement Vocalyx
D√©montre le workflow complet : upload audio ‚Üí transcription ‚Üí enrichissement
"""

import requests
import time
import sys


API_URL = "http://localhost:8000"


def upload_and_transcribe(audio_file: str) -> str:
    """Upload un fichier audio et d√©marre la transcription"""
    
    print(f"üì§ Upload: {audio_file}")
    
    with open(audio_file, 'rb') as f:
        files = {'file': f}
        response = requests.post(f"{API_URL}/api/transcribe", files=files)
    
    if response.status_code != 200:
        print(f"‚ùå Erreur upload: {response.status_code}")
        sys.exit(1)
    
    data = response.json()
    transcription_id = data['transcription_id']
    
    print(f"‚úÖ Transcription cr√©√©e: {transcription_id[:8]}...")
    return transcription_id


def wait_transcription(transcription_id: str, timeout: int = 300) -> dict:
    """Attend que la transcription soit termin√©e"""
    
    print(f"‚è≥ Attente transcription...")
    
    start_time = time.time()
    
    while time.time() - start_time < timeout:
        response = requests.get(f"{API_URL}/api/transcribe/{transcription_id}")
        
        if response.status_code != 200:
            print(f"‚ùå Erreur polling: {response.status_code}")
            sys.exit(1)
        
        data = response.json()
        status = data['status']
        
        if status == 'done':
            duration = data.get('duration', 0)
            processing_time = data.get('processing_time', 0)
            speed = duration / processing_time if processing_time > 0 else 0
            
            print(f"‚úÖ Transcription termin√©e")
            print(f"   ‚Ä¢ Dur√©e audio: {duration:.1f}s")
            print(f"   ‚Ä¢ Temps traitement: {processing_time:.1f}s")
            print(f"   ‚Ä¢ Vitesse: {speed:.1f}x temps r√©el")
            print(f"   ‚Ä¢ Langue: {data.get('language', 'N/A')}")
            print(f"   ‚Ä¢ Segments: {data.get('segments_count', 0)}")
            
            return data
        
        elif status == 'error':
            print(f"‚ùå Transcription en erreur: {data.get('error_message')}")
            sys.exit(1)
        
        time.sleep(2)
    
    print(f"‚ùå Timeout transcription ({timeout}s)")
    sys.exit(1)


def trigger_enrichment(transcription_id: str) -> int:
    """D√©clenche l'enrichissement d'une transcription"""
    
    print(f"\nüé® D√©clenchement enrichissement...")
    
    response = requests.post(f"{API_URL}/api/enrichment/trigger/{transcription_id}")
    
    if response.status_code != 200:
        print(f"‚ùå Erreur d√©clenchement: {response.status_code}")
        print(response.text)
        sys.exit(1)
    
    data = response.json()
    enrichment_id = data['enrichment_id']
    status = data['status']
    message = data['message']
    
    print(f"‚úÖ {message}")
    print(f"   ‚Ä¢ Enrichment ID: {enrichment_id}")
    print(f"   ‚Ä¢ Status: {status}")
    
    return enrichment_id


def wait_enrichment(transcription_id: str, timeout: int = 120) -> dict:
    """Attend que l'enrichissement soit termin√©"""
    
    print(f"‚è≥ Attente enrichissement (peut prendre 30-60s)...")
    
    start_time = time.time()
    
    while time.time() - start_time < timeout:
        response = requests.get(f"{API_URL}/api/enrichment/{transcription_id}")
        
        if response.status_code == 404:
            print(f"‚ö†Ô∏è  Enrichissement pas encore cr√©√©, attente...")
            time.sleep(3)
            continue
        
        if response.status_code != 200:
            print(f"‚ùå Erreur polling: {response.status_code}")
            sys.exit(1)
        
        data = response.json()
        status = data['status']
        
        if status == 'done':
            gen_time = data.get('generation_time', 0)
            tokens = data.get('tokens_generated', 0)
            
            print(f"‚úÖ Enrichissement termin√©")
            print(f"   ‚Ä¢ Temps g√©n√©ration: {gen_time:.1f}s")
            print(f"   ‚Ä¢ Tokens g√©n√©r√©s: {tokens}")
            print(f"   ‚Ä¢ Mod√®le: {data.get('model_used', 'N/A')}")
            
            return data
        
        elif status == 'error':
            print(f"‚ùå Enrichissement en erreur: {data.get('last_error')}")
            sys.exit(1)
        
        elapsed = time.time() - start_time
        print(f"   Status: {status} ({elapsed:.0f}s)", end='\r')
        
        time.sleep(3)
    
    print(f"\n‚ùå Timeout enrichissement ({timeout}s)")
    sys.exit(1)


def display_results(transcription: dict, enrichment: dict):
    """Affiche les r√©sultats complets"""
    
    print("\n" + "="*70)
    print("üìä R√âSULTATS COMPLETS")
    print("="*70)
    
    # Transcription
    print("\nüìù TRANSCRIPTION")
    print("-"*70)
    text = transcription.get('text', '')
    if len(text) > 200:
        print(f"Texte: {text[:200]}...")
    else:
        print(f"Texte: {text}")
    
    # Enrichissement
    print("\nüé® ENRICHISSEMENT")
    print("-"*70)
    
    title = enrichment.get('title', 'N/A')
    summary = enrichment.get('summary', 'N/A')
    bullets = enrichment.get('bullets', [])
    sentiment = enrichment.get('sentiment', 'N/A')
    confidence = enrichment.get('sentiment_confidence', 0)
    
    print(f"üìå Titre:")
    print(f"   {title}")
    
    print(f"\nüìÑ R√©sum√©:")
    print(f"   {summary}")
    
    print(f"\nüîπ Points cl√©s:")
    for i, bullet in enumerate(bullets, 1):
        print(f"   {i}. {bullet}")
    
    sentiment_emoji = {
        'positif': 'üòä',
        'negatif': 'üòû',
        'neutre': 'üòê',
        'mixte': 'ü§î'
    }.get(sentiment, '‚ùì')
    
    print(f"\n{sentiment_emoji} Sentiment: {sentiment} (confiance: {confidence:.0%})")
    
    topics = enrichment.get('topics')
    if topics:
        print(f"\nüè∑Ô∏è  Topics: {', '.join(topics)}")
    
    print("\n" + "="*70)


def get_combined(transcription_id: str) -> dict:
    """R√©cup√®re transcription + enrichissement en une requ√™te"""
    
    response = requests.get(f"{API_URL}/api/enrichment/combined/{transcription_id}")
    
    if response.status_code != 200:
        print(f"‚ùå Erreur r√©cup√©ration combin√©e: {response.status_code}")
        sys.exit(1)
    
    return response.json()


def get_stats():
    """Affiche les statistiques globales"""
    
    response = requests.get(f"{API_URL}/api/enrichment/stats/summary")
    
    if response.status_code != 200:
        print(f"‚ùå Erreur stats: {response.status_code}")
        return
    
    stats = response.json()
    
    print("\nüìä STATISTIQUES GLOBALES")
    print("-"*70)
    print(f"Total enrichissements: {stats['total']}")
    print(f"  ‚Ä¢ En attente: {stats['pending']}")
    print(f"  ‚Ä¢ En cours: {stats['processing']}")
    print(f"  ‚Ä¢ Termin√©s: {stats['done']}")
    print(f"  ‚Ä¢ Erreurs: {stats['error']}")
    
    if stats.get('avg_generation_time'):
        print(f"\nMoyennes:")
        print(f"  ‚Ä¢ Temps g√©n√©ration: {stats['avg_generation_time']:.1f}s")
        print(f"  ‚Ä¢ Tokens g√©n√©r√©s: {stats.get('avg_tokens_generated', 0)}")
        print(f"  ‚Ä¢ Confiance sentiment: {stats.get('avg_sentiment_confidence', 0):.0%}")


def main():
    """Workflow complet"""
    
    # V√©rifier argument
    if len(sys.argv) < 2:
        print("Usage: python enrichment_api_usage.py <audio_file>")
        print("\nExemple:")
        print("  python enrichment_api_usage.py mon_audio.wav")
        sys.exit(1)
    
    audio_file = sys.argv[1]
    
    print("="*70)
    print("üéôÔ∏è  VOCALYX - Workflow Complet (Transcription + Enrichissement)")
    print("="*70)
    
    try:
        # 1. Upload et transcription
        transcription_id = upload_and_transcribe(audio_file)
        transcription = wait_transcription(transcription_id)
        
        # 2. Enrichissement
        enrichment_id = trigger_enrichment(transcription_id)
        enrichment = wait_enrichment(transcription_id)
        
        # 3. Afficher r√©sultats
        display_results(transcription, enrichment)
        
        # 4. Statistiques
        get_stats()
        
        print("\n‚úÖ Workflow termin√© avec succ√®s !")
        print(f"\nüí° Vous pouvez aussi r√©cup√©rer les donn√©es combin√©es avec:")
        print(f"   GET /api/enrichment/combined/{transcription_id}")
        
    except KeyboardInterrupt:
        print("\n\n‚å®Ô∏è  Interruption utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()